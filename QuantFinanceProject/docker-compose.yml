# ─────────────────────────────────────────────────────────────
# docker-compose.yml  –  QuantFinanceProject
# One image powers both worker & streamer; credentials unified
# ─────────────────────────────────────────────────────────────

volumes:
  tsdata:
  metabase-data:
  superset-data:
  redis-data:

services:
########################################## GENERAL PROJECT SERVICES ##########################################
  tsdb:
    image: timescale/timescaledb:latest-pg14
    container_name: tsdb
    restart: unless-stopped
    environment:
      POSTGRES_DB: quantdata
      POSTGRES_USER: quantuser
      POSTGRES_PASSWORD: myStrongPass
      TZ: Asia/Kolkata
    ports:
      - "5432:5432"
    volumes:
      - tsdata:/var/lib/postgresql/data
      - ./docker/00_set_timezone.sql:/docker-entrypoint-initdb.d/00_tz.sql:ro
      - ./market_data_agent/storage/schema.sql:/docker-entrypoint-initdb.d/10_market_data_schema.sql:ro
      - ./earnings_agent/storage/schema.sql:/docker-entrypoint-initdb.d/20_earnings_data_schema.sql:ro
      - ./earnings_agent/storage/30_earnings_data_views.sql:/docker-entrypoint-initdb.d/30_earnings_data_views.sql:ro
      - ./earnings_agent/storage/40_clean_parsed_view.sql:/docker-entrypoint-initdb.d/40_clean_parsed_view.sql:ro
    # --- MODIFIED: Added healthcheck to ensure DB is ready ---
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U quantuser -d quantdata"]
      interval: 5s
      timeout: 5s
      retries: 5
    # --------------------------------------------------------

# ─────────────────────────────────────────────────────────────
  prefect-server:
    image: prefecthq/prefect:3-latest
    container_name: prefect-server
    restart: unless-stopped
    # --- MODIFIED: Now waits for tsdb to be healthy ---
    depends_on:
      tsdb:
        condition: service_healthy
    # --------------------------------------------------
    environment:
      PREFECT_API_DATABASE_CONNECTION_URL: "postgresql+asyncpg://quantuser:myStrongPass@tsdb:5432/quantdata"
      TZ: Asia/Kolkata
    ports:
      - "4200:4200"
    command: "prefect server start --host 0.0.0.0"

# ─────────────────────────────────────────────────────────────
  project-image:
    build:
      context: .
      dockerfile: Dockerfile
    image: quantfinanceproject:latest

# ─────────────────────────────────────────────────────────────
  prefect-worker:
    image: quantfinanceproject:latest
    container_name: prefect-worker
    restart: unless-stopped
    # --- MODIFIED: Now waits for server and healthy DB ---
    depends_on:
      prefect-server:
        condition: service_started
      tsdb:
        condition: service_healthy
    # -----------------------------------------------------
    working_dir: /app
    shm_size: 1g
    volumes:
      - .:/app
      - ./.env:/app/.env                      
    environment:
      PREFECT_API_URL: http://prefect-server:4200/api
      TZ: Asia/Kolkata
    command: >
      bash -c "
        micromamba run -n quant-env prefect work-pool create default-agent-pool --type process || true &&
        micromamba run -n quant-env prefect worker start --pool default-agent-pool --limit 5
      "

  ########################################## MARKET DATA SERVICES ##########################################
  market-streamer:
    image: quantfinanceproject:latest
    container_name: market-streamer
    restart: unless-stopped
    # --- MODIFIED: Now waits for tsdb to be healthy ---
    depends_on:
      tsdb:
        condition: service_healthy
    # --------------------------------------------------
    working_dir: /app
    shm_size: 1g
    volumes:
      - .:/app
      - ./.env:/app/.env
    environment:
      MARKET_DB_NAME: quantdata
      MARKET_DB_USER: quantuser
      MARKET_DB_PASSWORD: myStrongPass
      MARKET_DB_HOST: tsdb
      MARKET_DB_PORT: "5432"
      TZ: Asia/Kolkata
    command: >
      micromamba run -n quant-env python -m market_data_agent.ingestion.stream_intraday_1m
      
  ######################################### EARNINGS DATA SERVICES ##########################################
  xbrl-ingestion:
    image: quantfinanceproject:latest
    container_name: xbrl-ingestion
    restart: "no" # It's a one-off task
    depends_on:
      tsdb:
        condition: service_healthy
    working_dir: /app
    volumes:
      - .:/app
      - ./.env:/app/.env
    environment:
      # Pass database credentials to the container
      - EARNINGS_DB_HOST=tsdb
      - EARNINGS_DB_USER=${EARNINGS_DB_USER}
      - EARNINGS_DB_PASSWORD=${EARNINGS_DB_PASSWORD}
      - EARNINGS_DB_NAME=${EARNINGS_DB_NAME}
      - EARNINGS_DB_SCHEMA=${EARNINGS_DB_SCHEMA}
      - TZ=Asia/Kolkata
    # --- MODIFIED COMMAND ---
    # This now points to our new, single, consolidated ingestion script.
    command: [
      "micromamba", "run", "-n", "quant-env",
      "python", "-m", "earnings_agent.ingestion.xbrl.xbrl_ingestion_task"
    ]
# ─────────────────────────────────────────────────────────────
  xbrl-parser:
    image: quantfinanceproject:latest
    container_name: xbrl-parser
    restart: "no"
    depends_on:
      tsdb:
        condition: service_healthy
    working_dir: /app
    volumes:
      - .:/app
      - ./.env:/app/.env
    environment:
      - EARNINGS_DB_HOST=tsdb
      - EARNINGS_DB_USER=${EARNINGS_DB_USER}
      - EARNINGS_DB_PASSWORD=${EARNINGS_DB_PASSWORD}
      - EARNINGS_DB_NAME=${EARNINGS_DB_NAME}
      - TZ=Asia/Kolkata
    # --- MODIFIED COMMAND ---
    command: [
      "micromamba", "run", "-n", "quant-env",
      "python", "-m", "earnings_agent.parsing.xbrl.xbrl_parser_task"
    ]
# Add this service to your docker-compose.yml file
# This replaces the existing pdf-parser service with the enhanced version

  # Enhanced PDF Parser - Complete Pipeline
  pdf-parser:
    image: quantfinanceproject:latest
    container_name: pdf-parser
    restart: "no" # One-off task, set to "unless-stopped" for continuous processing
    depends_on:
      tsdb:
        condition: service_healthy
    working_dir: /app
    volumes:
      - .:/app
      - ./.env:/app/.env
      # Mount GCP credentials securely (read-only)
      - ./gcp-credentials.json:/app/gcp-credentials.json:ro
    environment:
      # Database Configuration
      - EARNINGS_DB_HOST=tsdb
      - EARNINGS_DB_USER=${EARNINGS_DB_USER}
      - EARNINGS_DB_PASSWORD=${EARNINGS_DB_PASSWORD}
      - EARNINGS_DB_NAME=${EARNINGS_DB_NAME}
      # Google Cloud Configuration
      - GOOGLE_GENAI_USE_VERTEXAI=true
      - GOOGLE_CLOUD_PROJECT=pdf-extractor-467911
      - GOOGLE_CLOUD_LOCATION=us-central1
      - GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json
      
      # System Configuration
      - TZ=Asia/Kolkata
      - PYTHONUNBUFFERED=1
    # Main command - runs the complete enhanced pipeline
    command: [
      "micromamba", "run", "-n", "quant-env",
      "python", "-m", "earnings_agent.parsing.pdf.pdf_parser_task"
    ]

  # Alternative: Isolation-only service (if you want to run phases separately)
  pdf-isolator:
    image: quantfinanceproject:latest
    container_name: pdf-isolator
    restart: "no"
    depends_on:
      tsdb:
        condition: service_healthy
    working_dir: /app
    volumes:
      - .:/app
      - ./.env:/app/.env
      - ./gcp-credentials.json:/app/gcp-credentials.json:ro
    environment:
      - EARNINGS_DB_HOST=tsdb
      - EARNINGS_DB_USER=${EARNINGS_DB_USER}
      - EARNINGS_DB_PASSWORD=${EARNINGS_DB_PASSWORD}
      - EARNINGS_DB_NAME=${EARNINGS_DB_NAME}
      - GOOGLE_GENAI_USE_VERTEXAI=true
      - GOOGLE_CLOUD_PROJECT=pdf-extractor-467911
      - GOOGLE_CLOUD_LOCATION=us-central1
      - GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json
      - TZ=Asia/Kolkata
      - PYTHONUNBUFFERED=1
    command: [
      "micromamba", "run", "-n", "quant-env",
      "python", "-m", "earnings_agent.parsing.pdf.pdf_isolator_task"
    ]

  # Alternative: Extraction-only service (if you want to run phases separately)
  pdf-extractor:
    image: quantfinanceproject:latest
    container_name: pdf-extractor
    restart: "no"
    depends_on:
      tsdb:
        condition: service_healthy
    working_dir: /app
    volumes:
      - .:/app
      - ./.env:/app/.env
      - ./gcp-credentials.json:/app/gcp-credentials.json:ro
    environment:
      - EARNINGS_DB_HOST=tsdb
      - EARNINGS_DB_USER=${EARNINGS_DB_USER}
      - EARNINGS_DB_PASSWORD=${EARNINGS_DB_PASSWORD}
      - EARNINGS_DB_NAME=${EARNINGS_DB_NAME}
      - GOOGLE_GENAI_USE_VERTEXAI=true
      - GOOGLE_CLOUD_PROJECT=pdf-extractor-467911
      - GOOGLE_CLOUD_LOCATION=us-central1
      - GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json
      - TZ=Asia/Kolkata
      - PYTHONUNBUFFERED=1
    command: [
      "micromamba", "run", "-n", "quant-env",
      "python", "-m", "earnings_agent.parsing.pdf.pdf_extractor_task"
    ]

# ─────────────────────────────────────────────────────────────
  nse-scraper:
    image: quantfinanceproject:latest
    container_name: nse-scraper
    restart: "no" # This is a one-off task
    depends_on:
      tsdb:
        condition: service_healthy
    working_dir: /app
    volumes:
      - .:/app
      - ./.env:/app/.env
    environment:
      - EARNINGS_DB_HOST=tsdb
      - EARNINGS_DB_USER=${EARNINGS_DB_USER}
      - EARNINGS_DB_PASSWORD=${EARNINGS_DB_PASSWORD}
      - EARNINGS_DB_NAME=${EARNINGS_DB_NAME}
      - TZ=Asia/Kolkata
    command: [
      "micromamba", "run", "-n", "quant-env",
      "python", "-m", "earnings_agent.ingestion.nse_scraper.nse_ingestion_task"
    ]
  bse-scraper:
    image: quantfinanceproject:latest
    container_name: bse-scraper
    restart: "no" # This is a one-off task
    depends_on:
      tsdb:
        condition: service_healthy
    working_dir: /app
    volumes:
      - .:/app
      - ./.env:/app/.env
    environment:
      - EARNINGS_DB_HOST=tsdb
      - EARNINGS_DB_USER=${EARNINGS_DB_USER}
      - EARNINGS_DB_PASSWORD=${EARNINGS_DB_PASSWORD}
      - EARNINGS_DB_NAME=${EARNINGS_DB_NAME}
      - TZ=Asia/Kolkata
    command: [
      "micromamba", "run", "-n", "quant-env",
      "python", "-m", "earnings_agent.ingestion.bse_scraper.bse_ingestion_task"
    ]
  bse-pdf-ingestion:
    image: quantfinanceproject:latest
    container_name: bse-pdf-ingestion
    restart: "no" # This is a one-off task
    depends_on:
      tsdb:
        condition: service_healthy
    working_dir: /app
    volumes:
      - .:/app
      - ./.env:/app/.env
    environment:
      - EARNINGS_DB_HOST=tsdb
      - EARNINGS_DB_USER=${EARNINGS_DB_USER}
      - EARNINGS_DB_PASSWORD=${EARNINGS_DB_PASSWORD}
      - EARNINGS_DB_NAME=${EARNINGS_DB_NAME}
      - TZ=Asia/Kolkata
    command: [
      "micromamba", "run", "-n", "quant-env",
      "python", "-m", "earnings_agent.ingestion.pdf_ingestion.pdf_ingestion_task"
    ]
# ─────────────────────────────────────────────────────────────
  nse-parser:
    image: quantfinanceproject:latest
    container_name: nse-parser
    restart: "no" # This is a one-off task
    depends_on:
      tsdb:
        condition: service_healthy
    working_dir: /app
    volumes:
      - .:/app
      - ./.env:/app/.env
    environment:
      - EARNINGS_DB_HOST=tsdb
      - EARNINGS_DB_USER=${EARNINGS_DB_USER}
      - EARNINGS_DB_PASSWORD=${EARNINGS_DB_PASSWORD}
      - EARNINGS_DB_NAME=${EARNINGS_DB_NAME}
      - TZ=Asia/Kolkata
    command: [
      "micromamba", "run", "-n", "quant-env",
      "python", "-m", "earnings_agent.parsing.nse_scraper.nse_scraper_parser_task"
    ]
# ─────────────────────────────────────────────────────────────
  quality_engine:
    image: quantfinanceproject:latest
    container_name: quality_engine
    restart: "no"
    depends_on:
      tsdb:
        condition: service_healthy
    working_dir: /app
    volumes:
      - .:/app
      - ./.env:/app/.env
    environment:
      - EARNINGS_DB_HOST=tsdb
      - EARNINGS_DB_USER=${EARNINGS_DB_USER}
      - EARNINGS_DB_PASSWORD=${EARNINGS_DB_PASSWORD}
      - EARNINGS_DB_NAME=${EARNINGS_DB_NAME}
      - TZ=Asia/Kolkata
    # --- MODIFIED COMMAND ---
    command: [
      "micromamba", "run", "-n", "quant-env",
      "python", "-m", "earnings_agent.quality_engine.quality_engine"
    ]
################################################################################
# NSE CLASSIFICATION
################################################################################
  nse-classifier:
    image: quantfinanceproject:latest
    container_name: nse_classifier
    restart: "no"
    depends_on:
      tsdb:
        condition: service_healthy
    working_dir: /app
    volumes:
      - .:/app
      - ./.env:/app/.env
    environment:
      - EARNINGS_DB_HOST=tsdb
      - EARNINGS_DB_USER=${EARNINGS_DB_USER}
      - EARNINGS_DB_PASSWORD=${EARNINGS_DB_PASSWORD}
      - EARNINGS_DB_NAME=${EARNINGS_DB_NAME}
      - TZ=Asia/Kolkata
    # --- MODIFIED COMMAND ---
    command: [
      "micromamba", "run", "-n", "quant-env",
      "python", "-m", "earnings_agent.ingestion.nse_classification.populate_classifications"
    ]
  company-classifier:
    image: quantfinanceproject:latest
    container_name: company_classifier
    restart: "no"
    depends_on:
      tsdb:
        condition: service_healthy
    working_dir: /app
    volumes:
      - .:/app
      - ./.env:/app/.env
    environment:
      - EARNINGS_DB_HOST=tsdb
      - EARNINGS_DB_USER=${EARNINGS_DB_USER}
      - EARNINGS_DB_PASSWORD=${EARNINGS_DB_PASSWORD}
      - EARNINGS_DB_NAME=${EARNINGS_DB_NAME}
      - TZ=Asia/Kolkata
    # --- MODIFIED COMMAND ---
    command: [
      "micromamba", "run", "-n", "quant-env",
      "python", "-m", "earnings_agent.ingestion.nse_classification.populate_company_master"
    ]
# ─────────────────────────────────────────────────────────────
################################################################################
# DATABASE GUI stack
################################################################################
  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    ports:
      - "3001:3000"
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: quantdata
      MB_DB_PORT: 5432
      MB_DB_USER: quantuser
      MB_DB_PASS: myStrongPass
      MB_DB_HOST: tsdb
      JAVA_TOOL_OPTIONS: "-Duser.timezone=Asia/Kolkata"
    depends_on:
      tsdb:
        condition: service_healthy

    # --------------------------------------------------
  superset:
    image: apache/superset:latest
    container_name: superset
    ports:
      - "8088:8088"
    depends_on:
      tsdb:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      # This tells Superset where to find the configuration file inside the container
      SUPERSET_CONFIG_PATH: "/app/superset_config.py"
    volumes:
      # ▼▼▼ THIS PATH HAS BEEN UPDATED ▼▼▼
      - ./docker/superset_config.py:/app/superset_config.py
      - superset-data:/app/superset_home
    command: >
      bash -c "
        pip install psycopg2-binary &&
        superset db upgrade &&
        superset fab create-admin --username admin --firstname Superset --lastname Admin --email admin@superset.com --password admin &&
        superset init &&
        /usr/bin/run-server.sh
      "
  redis:
    image: redis:latest
    container_name: superset_cache
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
  